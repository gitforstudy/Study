Linux Device Driver:
====================
"A device driver is a software component that allows the operating system to communicate with hardware devices. It acts as an interface between the OS and hardware, enabling applications to use hardware without needing to understand its low-level details."

Types of Device Drivers:
------------------------
- Character Device Driver : Deals with sequential data (e.g., keyboard, serial ports).
- Block Device Driver     : Deals with data in blocks (e.g., hard drives, USB).
- Network Device Driver   : Handles network interfaces (e.g., Ethernet, Wi-Fi).

For Linux, the /dev directory contains device files (e.g., /dev/sda, /dev/ttyS0).

Role of a Device Driver:
------------------------
- Acts as a translator between hardware and the OS.
- Sends and receives I/O requests from applications.
- Handles interrupts and memory management for hardware.

Structure of a Device Driver in Linux:
--------------------------------------
"A Linux device driver is typically a kernel module that interacts with the hardware using system calls."

Key Components:
---------------
- File Operations (struct file_operations) : Defines functions like open, read, write, release.
- Major & Minor Numbers 		   : Identify the driver (major) and specific device instance (minor).
- Device Registration (register_chrdev())  : Registers the driver with the OS.
- Interrupt Handling 			   : Used for event-driven communication.
- Kernel Space vs User Space 		   : Device drivers run in kernel space, while applications run in user space.


Basic Workflow of a Character Device Driver:
--------------------------------------------
			User app [ read() /dev/ttyS0 ]
			FS file /dev/ttyS0
User space		Syscall read()
				|
				| FS syscall are handled by virtual file system
				| kernel framework
--------------------------------|------------------------------------------
				|
				|
			Virtual filesystem
			Handle call on the file node
			call .read of the associated struct file_operations
				|
				| Calling associated function which was set during
Kernel space			| char driver registration procedure.
				|
			char device driver
			tty/serial/serial_core.c
			.seq_read()
			8250 UART driver
---------------------------------------------------------------------------
			UART IC
Hardware		(Part of the chipset)

---------------------------------------------------------------------------

	

Steps in Creating a Character Device Driver:
--------------------------------------------
1. Register the Driver (allocating major/minor number).
2. Implement File Operations (open, read, write, release).
3. Handle Hardware Communication (I/O operations).
4. Test with a User-Space Application.


Network Driver:
---------------












Reference: https://olegkutkov.me/2018/03/14/simple-linux-character-device-driver/
