Linux Device Driver:
====================
"A device driver is a software component that allows the operating system to communicate with hardware devices. It acts as an interface between the OS and hardware, enabling applications to use hardware without needing to understand its low-level details."

Types of Device Drivers:
------------------------
- Character Device Driver ‚Üí Deals with sequential data (e.g., keyboard, serial ports).
- Block Device Driver     ‚Üí Deals with data in blocks (e.g., hard drives, USB).
- Network Device Driver   ‚Üí Handles network interfaces (e.g., Ethernet, Wi-Fi).

For Linux, the /dev directory contains device files (e.g., /dev/sda, /dev/ttyS0).

Role of a Device Driver:
------------------------
- Acts as a translator between hardware and the OS.
- Sends and receives I/O requests from applications.
- Handles interrupts and memory management for hardware.

Structure of a Device Driver in Linux:
--------------------------------------
"A Linux device driver is typically a kernel module that interacts with the hardware using system calls."

Key Components:
---------------
- File Operations (struct file_operations) ‚Üí Defines functions like open, read, write, release.
- Major & Minor Numbers 		   ‚Üí Identify the driver (major) and specific device instance (minor).
- Device Registration (register_chrdev())  ‚Üí Registers the driver with the OS.
- Interrupt Handling 			   ‚Üí Used for event-driven communication.
- Kernel Space vs User Space 		   ‚Üí Device drivers run in kernel space, while applications run in user space.


Basic Workflow of a Character Device Driver:
--------------------------------------------
			User app [ read() /dev/ttyS0 ]
			FS file /dev/ttyS0
User space		Syscall read()
				|
				| FS syscall are handled by virtual file system
				| kernel framework
--------------------------------|------------------------------------------
				|
				|
			Virtual filesystem
			Handle call on the file node
			call .read of the associated struct file_operations
				|
				| Calling associated function which was set during
Kernel space			| char driver registration procedure.
				|
			char device driver
			tty/serial/serial_core.c
			.seq_read()
			8250 UART driver
---------------------------------------------------------------------------
			UART IC
Hardware		(Part of the chipset)

---------------------------------------------------------------------------

	

Steps in Creating a Character Device Driver:
--------------------------------------------
1. Register the Driver (allocating major/minor number).
2. Implement File Operations (open, read, write, release).
3. Handle Hardware Communication (I/O operations).
4. Test with a User-Space Application.





Network Driver:
===============

A network driver is a kernel module that enables communication between the operating system and network hardware (such as an Ethernet or Wi-Fi card). It handles packet transmission, reception, and device control via the kernel networking stack.

Key Concepts for Network Driver:
--------------------------------
a. Network Stack Overview

    Application Layer ‚Üí Uses sockets (e.g., HTTP, SSH)
    Transport Layer   ‚Üí TCP/UDP handling
    Network Layer     ‚Üí IP processing
    Data Link Layer   ‚Üí Ethernet, ARP
    Physical Layer    ‚Üí Network hardware (NIC)

b. Important Kernel Structures

    struct net_device    ‚Üí Represents a network interface.
    struct napi_struct   ‚Üí Manages polling for high-performance packet handling.
    struct sk_buff (skb) ‚Üí Used for storing and processing packets.

c. Key Network Driver Functions

    ndo_open        ‚Üí Called when the interface is brought up.
    ndo_stop        ‚Üí Called when the interface is brought down.
    ndo_start_xmit  ‚Üí Transmits packets.
    ndo_get_stats64 ‚Üí Retrieves network statistics.


Summary of Network Driver Role:
-------------------------------
-------------------------------------------------------------------------------------
Stage			Transmission (TX)		Reception (RX)
-------------------------------------------------------------------------------------
Application		send() -> Socket		recv() -> Read socket
Transport Layer		TCP/UDP Segmentation		TCP/UDP Reassembly
IP Layer		Adds IP headers			Checks IP headers
NIC Driver		ndo_start_xmit() -> DMA		IRQ -> napi_poll()
NIC Hardware		Converts data to signals	Converts signals to packets
-------------------------------------------------------------------------------------

‚Üí How does a network driver interact with the Linux TCP/IP stack?
	A network driver implements ndo_start_xmit() to transmit packets and napi_poll() to receive them.
	It works with DMA, Interrupts, and NAPI to interface with the NIC.

‚Üí What is skb_buff and how does it work?
	struct sk_buff is the data structure used by the kernel for storing and processing network packets.

‚Üí What is NAPI and why is it used?
	NAPI (New API) is a polling mechanism used by high-speed network drivers to reduce interrupt overhead.

‚Üí How does DMA help in network drivers?
	DMA allows NICs to transfer packets directly to RAM without CPU involvement, improving performance.


DMA (Direct Memory Access):
---------------------------
a. Why is DMA Needed?

    In traditional I/O, the CPU is responsible for copying data between network card (NIC) and RAM.
    This leads to high CPU usage and slow performance.
    DMA (Direct Memory Access) allows NICs to transfer data directly to/from RAM without CPU intervention.
    This significantly improves network throughput and efficiency.

b. How DMA Works in Network Drivers?

    Transmit (TX) Path (Sending Data)
	The network driver informs the NIC about a packet ready in RAM.
    	NIC fetches the packet from RAM using DMA.
    	The NIC then transmits the packet over the network medium.

    Receive (RX) Path (Receiving Data)
	NIC receives a network packet.
    	It places the packet in a pre-allocated DMA buffer in RAM.
    	The NIC triggers an interrupt to notify the CPU.
    	The driver processes the packet and passes it to the kernel stack.

c. Key Benefits of DMA

    Reduces CPU overhead (CPU doesn‚Äôt move data).
    Faster packet processing (NIC accesses RAM directly).
    Improves system performance, especially at high speeds (Gigabit, 10G, 40G networks).


NAPI (New API):
---------------
a. Why is NAPI Needed?

    In older interrupt-driven network drivers, every incoming packet generated a hardware interrupt.
    If packet rate is too high, the CPU spends most of its time handling interrupts instead of processing data.
    Solution: Use polling instead of interrupts when needed ‚Üí NAPI (New API for Network Drivers).

b. How NAPI Works?

    When a packet arrives, Initially, the NIC raises an interrupt. The driver disables further interrupts for that NIC.
    The driver starts polling the NIC for more packets.
    Once all packets are processed, If no more packets arrive for a while, interrupts are re-enabled.


Summary:
--------
---------------------------------------------------------------------------------------------------------------------
Feature			DMA						NAPI
---------------------------------------------------------------------------------------------------------------------
Purpose			Offload data transfer from CPU to NIC		Efficient packet processing
How it works?		NIC moves packets to/from RAM without CPU	Uses polling instead of frequent interrupts
Used in?		TX (send) & RX (receive)			RX (receive)
Main Benefit		Faster data movement, lower CPU usage		Better performance, reduced CPU load
---------------------------------------------------------------------------------------------------------------------

Data flow summary:
------------------

üì°  [1] Physical Layer (PHY)
    - Converts analog signals to digital bits
    - Interfaces with MAC via MII/RGMII etc.

üîó  [2] MAC Layer (Ethernet/Wi-Fi)
    - Checks destination MAC address
    - Accepts valid packets, pushes to DMA

üíæ  [3] DMA (Direct Memory Access)
    - Writes packet to kernel memory ring buffer
    - No CPU intervention required here

üîî  [4] Interrupt (ISR)
    - Triggered by NIC after DMA copy
    - ISR disables IRQs and schedules NAPI

üîÑ  [5] NAPI Polling (SoftIRQ)
    - Polls RX ring for packets (up to budget)
    - Creates `sk_buff` for each, disables IRQs

üì¶  [6] sk_buff Allocation
    - Wraps packet metadata and payload
    - Passed to `netif_receive_skb()` for further processing

üß∑  [7] Data Link Layer (L2 - Ethernet)
    - Verifies Ethernet header and Ethertype
    - Forwards to IP layer if Ethertype is 0x0800

üåê  [8] Network Layer (L3 - IP)
    - Validates IP header, matches destination
    - Calls protocol handler (TCP/UDP)

üîå  [9] Transport Layer (L4 - TCP/UDP)
    - TCP: Checks seq#, stores data, sends ACKs
    - UDP: Simple delivery to matching port/socket

üì≤  [10] Application Layer
    - App uses `recv()` or `read()` to fetch data
    - Kernel copies from sk_buff to user buffer
















Reference: https://olegkutkov.me/2018/03/14/simple-linux-character-device-driver/
