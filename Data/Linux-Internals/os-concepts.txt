Process Management:
===================

Process: A process is a program in execution. It represents the basic unit of work in a computer system. When you execute a program the operating system creates a process to manage the program's execution.

Key Characteristics of a Process:
---------------------------------
1. Unique identifier : 
		Each process is assigned a unique Process ID (PID) by the operating system.
2. Separate Address Space: 
		A process operates in its own memory space, ensuring isolation from other processes. This memory is divided into:
		Code Segment: Contains executable code.
    		Data Segment: Contains global and static variables.
		Heap: For dynamically allocated memory.
		Stack: For local variables and function call management.
3. Attributes of a Process:
		Stored in the process control block (PCB) i.e task_struct structure, which includes:
		- PID (Process ID).
		- Process State (Running, Sleeping, etc.).
		- Parent
		- Children
		- Priority
		- Program Counter (indicates the next instruction to execute).
		- Open File Descriptors.
4. Lifecycle Management:
		Processes go through a lifecycle:

		- Created: Process is being initialised.
		- Ready: Process is waiting for CPU scheduling.
		- Running: Process is executing on the CPU.
		- Blocked: Waiting for I/O or a resource.
		- Terminated: Execution is completed, but resources may still need to be reclaimed.

Types of Processes:
	- Foreground Process: Runs interactively with the user (e.g., a terminal command like ls).
	- Background Process: Runs in the background without user interaction (e.g., a web server).
	- Daemon Process: A special type of background process, usually started at boot time, to perform system-level tasks (e.g. sshd: handles SSH 
	  connections).
	- Orphan Process: A process whose parent process has terminated, but it is still running. Orphan processes are adopted by the init process (PID 1)
	  or systemd.
	- Zombie Process: A process that has completed execution but still has an entry in the process table because its parent has not read its exit status
	  (via wait() system call). This will Appears in ps output with a status of Z (zombie).
	- Interactive Process: A process initiated by the user that interacts directly with the user (via input and output). Ex: Vim
	- Batch Process: A process that runs without user intervention, often scheduled for execution. Ex: Commands or scripts scheduled using cron or at.
	- Init/System Process: The first process started by the kernel, responsible for bringing the system up and managing system-level processes. 
	  Ex: init (traditional Unix systems), systemd (modern Linux systems).

How Processes are Created:
	In Linux, processes are typically created using system calls:
	- fork(): Creates a copy of the current process (parent process). The new process is the child process.
	- exec(): Replaces the process's memory space with a new program.

	Some System calls used in processes:
	- wait(): Parent process waits for a child process to complete.
	- exit(): Terminates the process and releases its resources.

Thread:
-------
A thread is the smallest unit of execution within a process. It represents a single sequence of instructions that can be executed independently. Every process has at least one thread, called the main thread, but it can create multiple threads to perform concurrent tasks.

Key Characteristics of Threads:
-------------------------------
1. Shared Resources:
	- Threads of the same process share:
		- Memory (heap, global variables, etc.).
		- File descriptors.
		- Code and data sections.
	- Each thread has its own:
		- Stack (local variables, function calls).
		- Program counter (to track the execution sequence).
		- Registers.
2. Lightweight:
	- Threads are lightweight compared to processes because creating and managing threads require fewer resources than processes.
3. Communication:
	- Threads communicate more efficiently than processes because they share the same memory space.
4. Concurrency:
	- Threads enable concurrent execution of tasks within a process.


How Threads Differ from Processes:

----------------------------------------------------------------------------------------------------------------------------------------------------------
Aspect					Thread						Process
----------------------------------------------------------------------------------------------------------------------------------------------------------
Definition		A single execution path within a process.		An independent program in execution.

Memory			Shares memory and resources with other threads 		Has its own separate memory space.
			in the same process.

Creation		Lightweight; faster to create.				Heavier; slower to create.

Context Switching	Faster because threads share memory.			Slower due to separate memory spaces.

Communication		Easier (through shared memory).				More complex (requires IPC mechanisms like pipes or message queues).

Failure Impact		A thread crash can affect the whole process.		A process crash doesn't impact other processes.

Independence		Depends on the parent process.				Fully independent.

Overhead		Less overhead (e.g., lower CPU and memory usage).	Higher overhead.
----------------------------------------------------------------------------------------------------------------------------------------------------------

Synchronisation in Processes:

Synchronization in processes refers to coordinating the execution of multiple processes to ensure that they operate correctly and avoid conflicts when accessing shared resources. This is particularly important in scenarios where processes interact or share data, such as in multithreading or multiprocessing environments.

Key Problems Addressed by Synchronization:

1. Race Conditions: Occur when multiple processes access and manipulate shared data simultaneously, leading to unpredictable results.
2. Data Consistency: Ensures that shared data remains consistent across processes, even under concurrent modifications.
3. Deadlocks: Prevent processes from getting stuck in a state where they are waiting for resources held by each other indefinitely.
4, Resource Sharing: Ensures proper allocation and usage of resources among processes.

Mechanisms for Synchronisation:

1. Mutual Exclusion (Mutex): 
	- Purpose: Ensures that only one thread/process accesses the critical section at a time.
	- How It Works: Mutexes provide a locking mechanism. A thread must acquire the lock before entering the critical section and release it after
	  exiting. Example will be below.
	- APIs: pthread_mutex_lock(pthread_mutex_t *lock)
		pthread_mutex_unlock(pthread_mutex_t *lock)
		int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
		int pthread_create(pthread_t *restrict thread, const pthread_attr_t *restrict attr, void *(*start_routine)(void *), void *restrict arg);
		int pthread_join(pthread_t thread, void **retval);
		int pthread_mutex_destroy(pthread_mutex_t *mutex);

2. Semaphores: 
	- Purpose: A synchronisation tool that can manage access to resources by multiple threads.
	- Types:
		- Binary Semaphore: Similar to a mutex (values 0 or 1).
		- Counting Semaphore: Allows a fixed number of threads to access the resource.
	-APIs: 
		int sem_init(sem_t *sem, int pshared, unsigned int value);
		int sem_wait(sem_t *sem); // Acquire semaphore
		int sem_post(sem_t *sem); // Release semaphore
		int sem_destroy(sem_t *sem);

Critical section:
-----------------
A critical section is a segment of code in a program where shared resources (e.g., variables, data structures, hardware devices) are accessed. If multiple threads or processes access the critical section simultaneously without proper synchronization, it can lead to data inconsistency or race conditions.

Real-Life Example of a Critical Section: 
1. Amount Transaction
2. Printer Queue

Inter-Process Communication (IPC) Mechanism:
--------------------------------------------
Inter-Process Communication (IPC) is the mechanism by which processes in Linux (or any operating system) communicate with each other to share data or coordinate their activities. 

1. Pipes: 
   Definition: 	Pipes are a unidirectional communication mechanism that allows data to flow from one process to another in a 
   	       	producer-consumer fashion.
   Types:
    		Anonymous Pipes: Created using the pipe() system call and are used between parent and child processes.
    		Named Pipes (FIFOs): Can be used between unrelated processes and are created using the mkfifo command or mkfifo() function.
   Key Features:
		Data flows in a first-in-first-out (FIFO) order.
 		Block on read if the pipe is empty, and block on write if the pipe is full.
   APIs:
		pipe(int fildes[2]);  // Create pipe
		int mkfifo(const char *pathname, mode_t mode);

2. Message Queues:
   Definition: Message queues allow processes to exchange messages in a structured format.
   Key Features:
    		Messages are sent to and received from a queue.
    		Messages have priorities; higher-priority messages are retrieved first.
    		Created and managed using the msgget, msgsnd, msgrcv and msgctl system calls.

3. Shared Memory: 
   Definition: Shared memory allows multiple processes to access a common memory segment.
   Key Features:
    		Fastest form of IPC as data does not need to be copied between processes.
    		Requires synchronization (e.g., semaphores) to avoid data corruption.
   APIs:
    	shmget: Allocates shared memory.
    	shmat: 	Attaches the shared memory segment to a process's address space.
    	shmdt: 	Detaches the shared memory segment.
    	shmctl: Controls shared memory operations.

4. Semaphores:
   Definition: 	Semaphores are synchronization primitives used to control access to a shared resource.
   Types:
		Binary Semaphore: Works like a mutex (lock/unlock).
		Counting Semaphore: Tracks the number of available resources.
   Key Features:
		semget, semop, and semctl system calls are used to manage semaphores.
		Often used with shared memory for synchronization.

5. Signals:
   Definition: 	Signals are software interrupts sent to a process to notify it of an event.
   Key Features:
		Handled using signal handlers (signal or sigaction).
    		Can interrupt or terminate processes or execute custom code in the handler.

6. Sockets:
   Definition: 	Sockets allow communication between processes over a network or locally using the loopback interface.
   Types:
		Stream Sockets (TCP): Reliable, connection-oriented.
    		Datagram Sockets (UDP): Unreliable, connectionless.
   
Misc question:
--------------
- how does a process attach to shared memory internally ?
  The process of attaching to shared memory involves the following key steps:
	1. Creating or Accessing Shared Memory: 
		Shared memory is created or accessed using shmget(), which allocates a shared memory segment.
	   	This segment is identified by a unique key (IPC key).
	   	
		System Call: int shm_id = shmget(key, size, shmflg);
	   			key: Unique identifier for the shared memory segment.
				size: Size of the shared memory segment.
				shmflg: Flags to specify permissions (e.g., read/write).
				Returns a shared memory identifier (shm_id).
		Ex:	     shm_id = shmget(shm_key, 1024, 0666 | IPC_CREAT);

	2. Attaching to Shared Memory:
		A process attaches to the shared memory using shmat(), which maps the shared memory segment to
		the process's address space.
		The kernel updates the process's page table to include the shared memory region.

    		System Call: void *shmat(int shmid, const void *shmaddr, int shmflg);
				shm_id : Shared memory identifier obtained from shmget().
				shmaddr: The address at which the segment is mapped is determined by the shmaddr parameter. If it is equal
					 to 0, kernel decide the address where the segment is attached.
				shmflg : if 0, Specifies default read/write access.
		Ex:		char *shm_ptr = (char *)shmat(shm_id, NULL, 0);

	3. Internals of shmat():
	    	The kernel checks the shm_id to find the corresponding shared memory segment.
    		The segment's metadata (stored in kernel space) is updated with the process's details.
    		The kernel assigns a virtual address in the process's address space and updates the page tables accordingly.
    		This virtual address points to the physical memory of the shared memory segment.

	4. Using Shared Memory:
		Once attached, the process can directly read from or write to the shared memory as if it were part of its local memory.
    		The kernel ensures that changes made by one process are visible to others.

	5. Detaching from Shared Memory
    		When a process no longer needs access to the shared memory, it can detach using shmdt().
		
		System Call: int result = shmdt(shm_ptr);
		The kernel removes the mapping of the shared memory segment from the process's address space.
		The shared memory remains allocated until all processes detach and it is explicitly removed.

	6. Deleting Shared Memory
		The shared memory segment can be deleted using shmctl() with the IPC_RMID command.

    		System Call: shmctl(shm_id, IPC_RMID, NULL);
		The segment is marked for deletion. It will be removed once all processes have detached from it.

	7.Internal Kernel Mechanism
		Shared Memory Metadata:
        	The kernel maintains metadata for shared memory segments, such as segment ID, size, permissions, and attached processes.

    		Memory Mapping:
        	When a process attaches to shared memory, the kernel maps the physical memory associated with the shared segment into the
		virtual address space of the process.

	8.Synchronization:
        	If multiple processes access the same shared memory, synchronization mechanisms like semaphores or mutexes are often used
		to prevent race conditions.

	9.Page Tables:
        	The kernel updates the process's page tables to include entries for the shared memory. These entries map the shared virtual 
		memory to the physical memory of the segment.


			+----------------+          +----------------+
			|   Process 1    |          |   Process 2    |
			|                |          |                |
			| +----------+   |          |   +----------+ |
			| | Virtual  |   |          |   | Virtual  | |
			| | Mapping  |   |          |   | Mapping  | |
			| +----------+   |          |   +----------+ |
			|      |         |          |        |       |
			+------|---------+          +--------|-------+
			       |                             |
			       +------------+----------------+
			                    |
			             +-------------+
			             | Shared Memory| (Kernel Space)
			             +-------------+
			                    |
			             +-------------+
			             |  Semaphore   |
			             +-------------+




		






























